"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sqlite_1 = __importDefault(require("sqlite"));
class SQLiteProvider {
    constructor(config) {
        this.initialized = false;
        this.tableName = config.name || "Vultrex";
        this.fileName = config.fileName || "VultrexDB";
    }
    async init() {
        this.db = await sqlite_1.default.open(`./${this.fileName}.db`);
        await this.db.run(`CREATE TABLE IF NOT EXISTS '${this.tableName}' (key TEXT PRIMARY KEY, value TEXT);`);
        this.initialized = true;
    }
    async set(key, value) {
        this.db.run(`INSERT OR REPLACE INTO '${this.tableName}' (key, value) VALUES(?, ?);`, key, JSON.stringify(value));
    }
    async get(key, defaultValue) {
        const data = await this.db.get(`SELECT * FROM '${this.tableName}' WHERE key = ?;`, key);
        return data ? JSON.parse(data["value"]) : defaultValue;
    }
    async getAll() {
        const data = await this.db.all(`SELECT * FROM '${this.tableName}';`);
        return data.map(data => ({ key: data["key"], value: JSON.parse(data["value"]) }));
    }
    async size() {
        const data = await this.db.get(`SELECT count(*) FROM '${this.tableName}';`);
        return data["count(*)"];
    }
    async delete(key) {
        this.db.run(`DELETE FROM '${this.tableName}' WHERE key = ?;`, key);
    }
    async clear() {
        this.db.run(`DELETE FROM '${this.tableName}';`);
    }
}
exports.SQLiteProvider = SQLiteProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU1FMaXRlUHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJvdmlkZXJzL1NRTGl0ZVByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsb0RBQTBDO0FBSTFDLE1BQWEsY0FBYztJQVExQixZQUFtQixNQUE2QjtRQUZ6QyxnQkFBVyxHQUFZLEtBQUssQ0FBQztRQUduQyxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLElBQUksU0FBUyxDQUFDO1FBQzFDLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsSUFBSSxXQUFXLENBQUM7SUFDaEQsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJO1FBQ2hCLElBQUksQ0FBQyxFQUFFLEdBQUcsTUFBTSxnQkFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDO1FBQ3JELE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsK0JBQStCLElBQUksQ0FBQyxTQUFTLHVDQUF1QyxDQUFDLENBQUM7UUFDeEcsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDekIsQ0FBQztJQUVNLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBb0IsRUFBRSxLQUFVO1FBQ2hELElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLDJCQUEyQixJQUFJLENBQUMsU0FBUyw4QkFBOEIsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2xILENBQUM7SUFFTSxLQUFLLENBQUMsR0FBRyxDQUFJLEdBQW9CLEVBQUUsWUFBaUI7UUFDMUQsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxDQUFDLFNBQVMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDeEYsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztJQUN4RCxDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQU07UUFDbEIsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUM7UUFDckUsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkYsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJO1FBQ2hCLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMseUJBQXlCLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDO1FBQzVFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQW9CO1FBQ3ZDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLGdCQUFnQixJQUFJLENBQUMsU0FBUyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQUs7UUFDakIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDO0lBQ2pELENBQUM7Q0FDRDtBQTdDRCx3Q0E2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3FsaXRlLCB7IERhdGFiYXNlIH0gZnJvbSBcInNxbGl0ZVwiO1xuaW1wb3J0IHsgU1FMaXRlUHJvdmlkZXJPcHRpb25zIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvU1FMaXRlUHJvdmlkZXJPcHRpb25zXCI7XG5pbXBvcnQgeyBSb3dEYXRhIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvUm93RGF0YVwiO1xuXG5leHBvcnQgY2xhc3MgU1FMaXRlUHJvdmlkZXIge1xuXG5cdHByaXZhdGUgZGI6IERhdGFiYXNlO1xuXG5cdHByaXZhdGUgdGFibGVOYW1lOiBzdHJpbmc7XG5cdHByaXZhdGUgZmlsZU5hbWU6IHN0cmluZztcblx0cHVibGljIGluaXRpYWxpemVkOiBib29sZWFuID0gZmFsc2U7XG5cdFxuXHRwdWJsaWMgY29uc3RydWN0b3IoY29uZmlnOiBTUUxpdGVQcm92aWRlck9wdGlvbnMpIHtcblx0XHR0aGlzLnRhYmxlTmFtZSA9IGNvbmZpZy5uYW1lIHx8IFwiVnVsdHJleFwiO1xuXHRcdHRoaXMuZmlsZU5hbWUgPSBjb25maWcuZmlsZU5hbWUgfHwgXCJWdWx0cmV4REJcIjtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBpbml0KCkge1xuXHRcdHRoaXMuZGIgPSBhd2FpdCBzcWxpdGUub3BlbihgLi8ke3RoaXMuZmlsZU5hbWV9LmRiYCk7XG5cdFx0YXdhaXQgdGhpcy5kYi5ydW4oYENSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTICcke3RoaXMudGFibGVOYW1lfScgKGtleSBURVhUIFBSSU1BUlkgS0VZLCB2YWx1ZSBURVhUKTtgKTtcblx0XHR0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBzZXQoa2V5OiBzdHJpbmcgfCBudW1iZXIsIHZhbHVlOiBhbnkpIHtcblx0XHR0aGlzLmRiLnJ1bihgSU5TRVJUIE9SIFJFUExBQ0UgSU5UTyAnJHt0aGlzLnRhYmxlTmFtZX0nIChrZXksIHZhbHVlKSBWQUxVRVMoPywgPyk7YCwga2V5LCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuXHR9XG5cblx0cHVibGljIGFzeW5jIGdldDxUPihrZXk6IHN0cmluZyB8IG51bWJlciwgZGVmYXVsdFZhbHVlOiBhbnkpOiBQcm9taXNlPFQ+IHtcblx0XHRjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5kYi5nZXQoYFNFTEVDVCAqIEZST00gJyR7dGhpcy50YWJsZU5hbWV9JyBXSEVSRSBrZXkgPSA/O2AsIGtleSk7XG5cdFx0cmV0dXJuIGRhdGEgPyBKU09OLnBhcnNlKGRhdGFbXCJ2YWx1ZVwiXSkgOiBkZWZhdWx0VmFsdWU7XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgZ2V0QWxsKCk6IFByb21pc2U8Um93RGF0YVtdPiB7XG5cdFx0Y29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuZGIuYWxsKGBTRUxFQ1QgKiBGUk9NICcke3RoaXMudGFibGVOYW1lfSc7YCk7XG5cdFx0cmV0dXJuIGRhdGEubWFwKGRhdGEgPT4gKHsga2V5OiBkYXRhW1wia2V5XCJdLCB2YWx1ZTogSlNPTi5wYXJzZShkYXRhW1widmFsdWVcIl0pIH0pKTtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBzaXplKCk6IFByb21pc2U8YW55PiB7XG5cdFx0Y29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuZGIuZ2V0KGBTRUxFQ1QgY291bnQoKikgRlJPTSAnJHt0aGlzLnRhYmxlTmFtZX0nO2ApO1xuXHRcdHJldHVybiBkYXRhW1wiY291bnQoKilcIl07XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgZGVsZXRlKGtleTogc3RyaW5nIHwgbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0dGhpcy5kYi5ydW4oYERFTEVURSBGUk9NICcke3RoaXMudGFibGVOYW1lfScgV0hFUkUga2V5ID0gPztgLCBrZXkpO1xuXHR9XG5cblx0cHVibGljIGFzeW5jIGNsZWFyKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHRoaXMuZGIucnVuKGBERUxFVEUgRlJPTSAnJHt0aGlzLnRhYmxlTmFtZX0nO2ApO1xuXHR9XG59Il19